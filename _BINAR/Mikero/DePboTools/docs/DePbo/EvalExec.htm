<html>

<head>
<meta http-equiv="Content-Language" content="en-au">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>well here we are</title>
</head>

<body>

<p><b><font face="Arial">__EVAL()&nbsp;&nbsp; __EXEC() and the sqX language.</font></b></p>

<p><b><font face="Arial">mynotes</font></b></p>

<p><font face="Arial">&quot;1&quot; is returned as numeric 1 even with str 1. str &quot;1&quot; will 
return &quot;&quot;&quot;1&quot;&quot;&quot;</font></p>

<p>' is trnsalted as &quot; in evals</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><b><font face="Arial">.....</font></b></p>

<p><font face="Arial">Eval and Exec are powerful extensions introduced by vbs to 
a 'standard' c compiler. They can be used in preference to macros (#defines) and 
offer more flexibility.</font></p>

<p><font face="Arial">class var##_EVAL(value)</font></p>

<p><font face="Arial">_EXEC(value=value+1); // and so on</font></p>

<p><font face="Arial">This is not a tutorial on eval/exec. Look elsewhere. 
Suffice to say eval / exec reduce the amount of repetitive coding required to a 
few simple lines in the <u>source</u> code.</font></p>

<p><font face="Arial">EVAL and EXEC utilise a <u>limited</u> subset of the equally powerful, and 
unique, bis sqX language. (sqX means sqf or sqs)</font></p>

<p><font face="Arial">If you are working with model.cfg's you are probably unaware that you are 
even using sqX.</font></p>

<p><font face="Arial">angle=rad 90; // eg</font></p>

<p><font face="Arial">The sqx language 
processor is an ever evolving language 
described in the comref. It is used almost exclusively in sqX files to control 
gameplay. A small portion of the language is&nbsp; usable 
in EXEC/EVAL statements. All usable verbs (operators) are 
listed below. </font></p>

<p><font face="Arial">This limitation is due to the fact that the result 
produced by an eval or exec <b>must</b> produce a constant that can be baked in.</font></p>

<p><font face="Arial">Examples are</font></p>

<ul>
  <li><font face="Arial">&nbsp;&nbsp;&nbsp; rad 90</font></li>
  <li><font face="Arial">&nbsp;&nbsp;&nbsp; 4+7</font></li>
  <li><font face="Arial">&nbsp;&nbsp;&nbsp; true/false</font></li>
  <li><font face="Arial">&nbsp;&nbsp;&nbsp; sin 63</font></li>
</ul>

<p>Baking occurs </p>

<ul>
  <li>during binarisation, eg the creation of a pbo, OR, </li>
  <li>at engine load time when the config.cpp (eg) needs to be binarised and 
  normally should have been</li>
  <li>at game load time when the description.ext is baked for _that_ session.</li>
</ul>

<p>description.ext is unique in that it cannot be binarised. It&nbsp; must 
remain as plain jane text so that the engine can re-arrange the mission each 
time that mission is started. Not always used by the mission author, but the 
only way it can be done. The dll <b>will</b> binarise description ext to look 
for errors, strip out all comments, and merge #includes. The result is 
subsequently converted back to text to save in a pbo.</p>

<p>A config cpp is normally baked during the packing process. A special case 
exists where <i>some</i> constants generated by an exec/eval can only be known 
at engine load time. An example would be random(). It is rare to use EVALs in a 
config.cpp, and exceptionally rare for them to contain 'engine time' constants. 
The dll however watches for this and in this very rare instance will save a 
plain jane config.cpp, not a config.bin.</p>

<p>The same constraints apply to description.ext where 'game time' constants are 
employed in an exec/eval. In both cases the dll saves the original text file 
'as-is' and makes no attempt to reduce it (other than checking for errors). In 
this case, the user must take care that included files are also packed into the 
pbo..</p>

<p><font face="Arial">The 'engine time' and 'game time' constants are:</font></p>

<ul>
  <li><font face="Arial">productversion</li>
  <li>random</li> </font>
  <li><font face="Arial">localize</font></li>
</ul>

<p>The dll will warn that they are being used.</p>

<hr>
<blockquote>
<p><font face="Arial">These two names use the sqX programming language to extend 
the C++ compiler.</font></p>
<p><font face="Arial">DePbo.dll will accept only&nbsp; __EXEC and __EVAL expressions that produce 
constants.</font></p>
  <blockquote>
<p><font face="Arial"><b>radians =__EVAL(cos 60);&nbsp;</b> produces a constant</font></p>
<p><font face="Arial"><b>radians = cos(60); </b>// cannot </font> </p>
<p><font face="Arial"><b>__EVAL(select player);</b> // does not and has no meaning in the context of&nbsp; config.cpp or rvmat.</font></p>
  </blockquote>
</blockquote>
<hr>
<p><font face="Arial">Depbo treats the expression(s) contained in a __EXEC identically to an 
expression contained in a _EVAL. Put simply:</font></p>
<p><b><font face="Arial">var = __EVAL(expression);</font></b></p>
<blockquote>
<p><font face="Arial">expression:= &quot;hello&quot;,&nbsp; 6+5,&nbsp; 'rad 60'</font></p>
</blockquote>
<p><font face="Arial"><b>__EXEC(statments); </b></font></p>
<blockquote>
<p><font face="Arial">statements|:= statement;statement;statement; // last ; is 
optional</font></p>
  <blockquote>
<p><font face="Arial">statement=<b>localVar = expression[;]</b></font></p>
    <blockquote>
<p><font face="Arial">localVars are used by subsequent expressions in the same _EXEC, subsequent 
_EXECs and/ subsequent EVALs. localVars cannot be accessed by the c language itself. 
Thus</font></p>
      <blockquote>
<p><font face="Arial">value=localVar; // sets value to &quot;localVar&quot;</font></p>
<p><font face="Arial">value=__EVAL(localVar);&nbsp; // sets the value to the value contained in 
localVar</font></p>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>
<p><font face="Arial"><b><u>expression evaluation: order of precedence.</u></b></font></p>
<p><font face="Arial">Reading  sqx expressions can confuse as to what is operated on, by 
what.</font></p>
<p><font face="Arial">The 'rules' can be neatly summed up in the following line:</font></p>
<p><font face="Arial">&nbsp;&nbsp;&nbsp; operand [&lt;binary operator&gt; operand .... 
&lt;binary operator&gt; 
operand]</font></p>
<p><font face="Arial">The optional <b>binary operator(s)</b> are defined as requiring two operands!</font></p>
<p><font face="Arial">binary operators can only work with&nbsp;the results of a previous 
<u>operation</u>.</font></p>
<blockquote>
<p><font face="Arial">5 + 6;// the result of the previous operation is '5'</font></p>
</blockquote>
<p><font face="Arial"><b>Operands</b></font></p>
<p><font face="Arial">Operands produce a <b>value</b>. Either direct constants, variables that contain a 
value, or, <b>
unary operators</b> that produce a value </font> </p>
<blockquote>
<p><font face="Arial">A value is a &quot;string&quot;,&nbsp; bool, array, or numeric</font></p>
<p><font face="Arial">A constant is 'pi', 'true', or 'false'</font></p>
<p><font face="Arial"><b>unary operators</b> take one operand <u>and one only 
operand </u>(which in itself might be another unary operator). </font> </p>
</blockquote>
<p><font face="Arial">It is the nature of the unary operator that causes 
confusion in the legibility of sqX code. Example cos 60+5</font></p>
<blockquote>
<p><font face="Arial">cos 60; is a unary operator taking <b>one</b> operand (60)</font></p>
<p><font face="Arial">cos 60+5 is a unary operator taking <b>one</b> operand (60) feeding into a binary 
operator (result + 5)</font></p>
<p><font face="Arial">cos sqrt 99; is a unary operator taking <b>one</b> operand (sqrt) 
taking <b>one</b> operand&nbsp; 99</font></p>
</blockquote>
<p>&nbsp;</p>
<p dir="ltr"><font face="Arial">precedence:= Operand [&lt;binary operators 
operand...&gt;]</font></p>
<p><b><font face="Arial">Operand Precedence</font></b></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="47%" height="276">
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">example</font></td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19">&nbsp;</td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="19"><font face="Arial">unary operators</font></td>
    <td width="33%" height="19"><font face="Arial">+operand</font></td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="17"></td>
    <td width="33%" height="19">
    <p dir="ltr"><font face="Arial">()</font></td>
    <td width="34%" height="19"><font face="Arial">expression</font></td>
  </tr>
  <tr>
    <td width="33%" height="19"><font face="Arial">constants</font></td>
    <td width="33%" height="19"><font face="Arial">pi</font></td>
    <td width="34%" height="19"><font face="Arial">number</font></td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">true</font></td>
    <td width="34%" height="19"><font face="Arial">boolean</font></td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">false</font></td>
    <td width="34%" height="19"><font face="Arial">boolean</font></td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19">&nbsp;</td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="19"><font face="Arial">variable</font></td>
    <td width="33%" height="19"><font face="Arial">value</font></td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="19"><font face="Arial">value</font></td>
    <td width="33%" height="19"><font face="Arial">&quot;string&quot;</font></td>
    <td width="34%" height="19">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">boolean</font></td>
    <td width="34%" height="19"><font face="Arial">'true'</font></td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">number</font></td>
    <td width="34%" height="19"><font face="Arial">7</font></td>
  </tr>
  <tr>
    <td width="33%" height="19">&nbsp;</td>
    <td width="33%" height="19"><font face="Arial">array</font></td>
    <td width="34%" height="19"><font face="Arial">[1,2,3,4]</font></td>
  </tr>
  </table>
<p><b><font face="Arial">unary operators</font></b></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="19%" height="1">
  <tr>
    <td width="50%" height="17" align="left"><font face="Arial">!</font></td>
    </tr>
  <tr>
    <td width="50%" height="17" align="left"><font face="Arial">not</font></td>
    </tr>
  <tr>
    <td width="50%" height="17" align="left"><font face="Arial">+</font></td>
    </tr>
  <tr>
    <td width="50%" height="17" align="left"><font face="Arial">-</font></td>
    </tr>
  <tr>
    <td width="50%" height="19" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td width="50%" height="17" align="left"><font face="Arial">abs</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">acos</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">asin</font></td>
  </tr>
  <tr>
    <td width="50%" height="14" align="left">
    <font FACE="Arial">atg</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left">
    <font FACE="Arial">atan</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">ceil </font>
    </td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">cos</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">deg</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">exp</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">floor</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">ln</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">log</font></td>
  </tr>
  <tr>
    <td width="50%" height="18" align="left"><font face="Arial">rad</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">round</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">sin</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">sqrt</font></td>
  </tr>
  <tr>
    <td width="50%" height="19" align="left"><font face="Arial">tan</font></td>
  </tr>
  </table>

<p><b><font face="Arial">binary operators</font></b></p>
<table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="13%" height="232">
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">&amp;&amp;, 'and '</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">|| , 'or'</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">!=</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">==</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">&lt;, &lt;=</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">&gt;,&gt;=</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">%, 'mod '</font></td>
  </tr>
  <tr>
    <td width="19%" height="13" align="left"><font face="Arial">^</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">* , /</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left"><font face="Arial">+, -</font></td>
  </tr>
  <tr>
    <td width="19%" height="19" align="left">&nbsp;</td>
    </tr>
  <tr>
    <td width="18%" height="19" align="left"><font face="Arial">atan2</font></td>
    </tr>
  <tr>
    <td width="18%" height="19" align="left"><font face="Arial">max</font></td>
    </tr>
  <tr>
    <td width="18%" height="19" align="left"><font face="Arial">min</font></td>
    </tr>
  <tr>
    <td width="18%" height="19" align="left"><font face="Arial">mod</font></td>
    </tr>
  <tr>
    <td width="18%" height="19" align="left"><font face="Arial">select</font></td>
    </tr>
  <tr>
    <td width="19%" height="19" align="left">&nbsp;</td>
    </tr>
</table>

<p><u><b><font face="Arial">sqx langauge extensions</font></b></u></p>
<p><font face="Arial">The dll has the following extensions to the existing sqx comref</font></p>
<p><font face="Arial">binary operators</font></p>
<p><font face="Arial">+=<br>
-=<br>
*=<br>
/=<br>
These operate in the same manner as you expect from the C language and&nbsp; 
have meaning only in __EXEC expressions. In __EVAL the = is ignored</font></p>
<p><b><font face="Arial">\n</font></b></p>
<p><font face="Arial">largely present in dreadful fsm syntax, the dll accepts multiline 
exec or eval statements with, or without, the \n</font></p>
<p><font face="Arial">example</font></p>
<p><font face="Arial">__EXEC(&nbsp; k=2^5<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
n = 7*k<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )</font></p>
<p><font face="Arial">&nbsp;both n, and k, are available for subsequent use.</font></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>